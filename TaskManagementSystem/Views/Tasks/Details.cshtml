
@model TaskManagementSystem.Models.Task

@{
    ViewBag.Title = "Details";
    bool isAssigned = ViewBag.isUser;
    bool isResponsible = ViewBag.isResponsible;
    string userName = User.Identity.Name;
    string groupName = ViewBag.GroupName;
    List<TaskManagementSystem.Models.Task> childs = ViewBag.childs;
    bool isChilds = (childs != null && childs.Count > 0);
    bool isChildsClosed = ViewBag.isChildsClosed;
    bool isOver = ViewBag.isOver;
}

<h2>@Html.DisplayFor(model => model.Title)</h2>
@if (!isOver && isResponsible) { @Html.ActionLink("Создать подзадачу", "Create", "Tasks", new { id = Model.ID }, new { @class = "btn btn-info btn-sm glyphicon glyphicon-add" })}
<div>
    <h4>@Html.DisplayFor(model => model.Description)</h4>
    <hr />
    @if (isOver || (Model.ResponsibleUser.UserName == User.Identity.Name && Model.TaskStatus.Status == Shared.StatusConstants.NEED_VERIFY))
    {
       <h4> <b>Результат:</b> @Html.DisplayFor(model => model.Result.ResultText) </h4> 
        if (Model.Result != null && Model.Result.Attachment != null)
        {
            @Html.ActionLink(Model.Result.Attachment.FileName, "Download", new { attachId = Model.Result.Attachment.ID })
          }
        <hr/>
    }
    <dl class="dl-horizontal">

        <dt>
            @(String.IsNullOrEmpty(groupName)?Html.DisplayNameFor(model => model.AssignedUser):Html.DisplayNameFor(model => model.Group))
            
        </dt>
        <dd>
            @(String.IsNullOrEmpty(groupName) ? Html.DisplayFor(model => model.AssignedUser.UserName) : Html.ActionLink(Model.Group.Name, "Details", "Groups", new { id = Model.GroupId }, null))
            

            @if((isAssigned|| User.IsInRole("Admin") || isResponsible) &&
                (Model.TaskStatus.Status == Shared.StatusConstants.NEED_INPUT ||
                Model.TaskStatus.Status == Shared.StatusConstants.NEED_VERIFY ||
                Model.TaskStatus.Status == Shared.StatusConstants.OPEN) && Model.GroupId == null)
            {
                @Ajax.ActionLink("Назначить пользователя", "AssignUserPopUp","Tasks",
               new { taskId = Model.ID }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "result",
                   InsertionMode = InsertionMode.Replace, OnSuccess = "openPopup" },
               new { @class = "btn btn-default btn-sm	glyphicon glyphicon-remove-sign" , @id ="assignUser"})
            <br />
                <div id="result" style="display:none;"></div>
            }
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Project.ProjectName)
        </dt>

        <dd>
            @Html.ActionLink(Model.Project.ProjectName, "Details","Projects",new { id = Model.ProjectId },null)
        </dd>
        @if (Model.TaskStatus.Status == Shared.StatusConstants.OPEN && isAssigned && Model.GroupId == null)
        {
            <dt></dt>
            <dd>
                @Html.ActionLink(
                linkText: " Начать выполнение",
                actionName: "AssignToMe",
                routeValues: new { id = Model.ID },
                htmlAttributes: new { @class = "btn btn-success btn-sm glyphicon glyphicon-remove" }
                )
            </dd>
        }
        else if (Model.TaskStatus.Status == Shared.StatusConstants.IN_PROCESS )
        {
            if (isChildsClosed)
            {
            <dt></dt>
            <dd>
                @Ajax.ActionLink("Задача выполнена", "DonePopUp", "Tasks", new { taskId = Model.ID }, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "result2", InsertionMode = InsertionMode.Replace, OnSuccess = "openPopup2" }, new { @class = "btn btn-success btn-sm glyphicon glyphicon-ok" })<br />
                <div id="result2" style="display:none;"></div>
            </dd>
            }
            <dt></dt>
                        <dd>
                            @Html.ActionLink(
                linkText: "Нужна дополнительная информация",
                actionName: "NeedInput",
                routeValues: new { id = Model.ID },
                htmlAttributes: new { @class = "btn btn-warning btn-sm glyphicon glyphicon-info-sign" }
                                )
                        </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.TaskPriority.Priority)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TaskPriority.Priority)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TaskStatus.Status)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TaskStatus.Status)
            @if (isResponsible && Model.TaskStatus.Status == Shared.StatusConstants.NEED_VERIFY)
            {
                @Html.ActionLink("Проверена", "Verified", "Tasks", new { id = Model.ID }, new { @class="btn btn-success btn-sm glyphicon glyphicon-thumbs-up" })<br />
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ResponsibleUser)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ResponsibleUser.UserName)
            @if (isResponsible)
            {
            @Ajax.ActionLink("Изменить", "AssignUserPopUp", "Tasks",
                        new { taskId = Model.ID, isChange = true }, new AjaxOptions
                        {
                            HttpMethod = "GET",
                            UpdateTargetId = "result3",
                            InsertionMode = InsertionMode.Replace,
                            OnSuccess = "openPopup3"
                        },
                        new { @class = "btn btn-default btn-sm	glyphicon glyphicon-edit-sign", @id = "assignedUser" })
            <br />
            <div id="result3" style="display:none;"></div>
            }
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.DateStart)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DateStart)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastUpdate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastUpdate)
        </dd>
        @if (Model.ScheduledTime != null)
        {
        <dt>
            @Html.DisplayNameFor(model => model.ScheduledTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ScheduledTime.Value)
        </dd>
        }
        @if (Model.ParentTask != null)
        {
        <dt>
            @Html.DisplayNameFor(model => model.ParentTask)
        </dt>

        <dd>
            @Html.ActionLink(Model.ParentTask.Title, "Details", new { id = Model.ParentTaskId })
            
        </dd>
        }
        @if(isChilds)
        {
            <dt> Подзадачи:</dt>
            <dd>
                <ul>
                    @foreach (var a in childs)
                    {
                        <li> @Html.ActionLink(a.Title, "Details", new { id = a.ID }) : @a.TaskStatus.Status : @a.AssignedUser.UserName</li>
                    }
                </ul>
            </dd>
        }
        <hr />
        @if (Model.Attachments != null && Model.Attachments.Count > 0)
        {
            <dt>
                @Html.DisplayNameFor(a => a.Attachments);
            </dt>
            <dd>
                @foreach (var a in Model.Attachments)
                {
                @Html.ActionLink(a.FileName,"Download",new { attachId = a.ID })
                if(a.User.UserName.Equals(User.Identity.Name) || User.IsInRole("Admin"))
                        {
                            @Html.ActionLink("Удалить", "DeleteAttachment", new { id = a.ID }, new { @class = "btn btn-warning" })
                        }
                    <br/>
                }
            </dd>
        }
    </dl>
    @using (Html.BeginForm("AddAttachments", "Tasks", FormMethod.Post, new { enctype = "multipart/form-data" }))
     {
                <input type="file" name="FileUpload1" />
                <input type="submit" value="Добавить файлы" />
                <input type="hidden" name="id" value="@Model.ID" />

    }
    <hr/>
    <div id="divComments" class="chatbox">
        <h3>Комментарии: </h3>
        <hr />
        <div class="chat_inner" >

        </div>
    </div>
           @using (Ajax.BeginForm("AddComment", new AjaxOptions
           {
               Url = Url.Action("AddCommentAjax"),
               HttpMethod = "POST",
               OnSuccess = "AfterAddComment"
           }))
           {
             <input name="taskId" type="hidden" value="@Model.ID" />
            @Html.TextArea("comment",new { @rows = "4",@cols="300" })
              <br />
            <input type="submit" value="Добавить комментарий" />
           }
</div>
<p>
@if (Model.ResponsibleUser.UserName == User.Identity.Name || User.IsInRole("Admin"))
{
    @Html.ActionLink("Изменить", "Edit", new { id = Model.ID }, new { @class = "btn btn-primary btn-sm glyphicon glyphicon-edit" })
}
    @Html.ActionLink("Назад к списку", "Index")
</p>



@section scripts
{
    <script type="text/javascript">
   
        function AfterAddComment()
        {
            $("#comment").val("");
            GetComments()
        }
        function GetComments()
        {
            $.getJSON('@Url.Action("GetComments", new { id = Model.ID })', function (data) {
                var items = [];
                for (var i = 0; i < data.Data.length; i++) {
                    items.push("<div class='clearfix " + (("@User.Identity.Name" == data.Data[i].Key) ? "chat_out" : "chat_in") + "'>" +
                    "<span class='message'>" +
                        data.Data[i].Value + "</span><span class='author'>"
                        + data.Data[i].Key + "</span>" +
                        '</div>');
                }
                $("#divComments").html(items.join(' '))
            });
        }


        $(document).ready(function () {
            setInterval(GetComments, 1000);
            if ($("#result")) {
                $("#result").dialog({
                    autoOpen: false,
                    width: 500,
                    height: 'auto',
                    modal: true
                });
            }
            if ($("#resul2")) {
                $("#result2").dialog({
                    autoOpen: false,
                    width: 500,
                    height: 'auto',
                    modal: true
                });
            }
        });
        if ($("#resul3")) {
            $("#result3").dialog({
                autoOpen: false,
                width: 500,
                height: 'auto',
                modal: true
            });
        }
        function openPopup() {
            $("#result").show();
            $("#result").dialog("open");
        }
        function openPopup2() {
            $("#result2").show();
            $("#result2").dialog("open");
        }
        function openPopup3() {
            $("#result3").show();
            $("#result3").dialog("open");
        }

        function closepopup(){
            $("#result1").hide();
            $("#result2").hide();
            $("#result3").hide();
        }
        

    </script>
}
